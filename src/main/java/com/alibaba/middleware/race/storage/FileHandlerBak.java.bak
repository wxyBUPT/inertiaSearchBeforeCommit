
abstract class DataFileHandler{


    protected StoreExtentManager storeExtentManager;
    abstract void handleLine(String line) throws IOException,OrderSystem.TypeException,InterruptedException;

    void handle(Collection<String> files) throws InterruptedException,IOException,OrderSystem.TypeException{
        this.storeExtentManager = StoreExtentManager.getInstance();
        for(String file:files) {
            BufferedReader bfr = createReader(file);
            try {
                String line = bfr.readLine();
                while (line != null) {
                    handleLine(line);
                    line = bfr.readLine();
                }
            } finally {
                bfr.close();
            }
        }
    }

    private BufferedReader createReader(String file) throws FileNotFoundException{
        return new BufferedReader((new FileReader(file)));
    }

    private Row createKVMapFromLine(String line){
        String[] kvs = line.split("\t");
        Row kvMap = new Row();
        for (String rawkv : kvs) {
            int p = rawkv.indexOf(':');
            String key = rawkv.substring(0, p);
            String value = rawkv.substring(p + 1);
            if (key.length() == 0 || value.length() == 0) {
                throw new RuntimeException("Bad data:" + line);
            }
            RowKV kv = new RowKV(key, value);
            kvMap.put(kv.key(), kv);
        }
        return kvMap;
    }
}

class GoodFileHandler extends DataFileHandler{
    @Override
    void handleLine(String line) throws IOException, OrderSystem.TypeException, InterruptedException {
        byte[] bytes = line.getBytes("UTF-8");
        DiskLoc diskLoc = storeExtentManager.putBytes(bytes);
        diskLoc.setStoreType(StoreType.GOODLINE);
        /**
         * Find goodid and salerid
         */
        int i = line.indexOf("goodid:");
        line = line.substring(i+7);
        i = line.indexOf("\t");
        String goodid = line.substring(0,i);

        if(goodid==null ){
            throw new RuntimeException("Bad data! goodid " + goodid  );
        }
        ComparableKeysByGoodId goodIdKeys = new ComparableKeysByGoodId(goodid,diskLoc);
        DiskLocQueues.comparableKeysByGoodIdQueue.put(goodIdKeys);
    }

    void handleRow(Row row) throws IOException,InterruptedException{
        byte[] byteRow = SerializationUtils.serialize(row);
        DiskLoc diskLoc = storeExtentManager.putBytes(byteRow);
        diskLoc.setStoreType(StoreType.ROWDATA);
        /**
         * Put index info to queue
         */
        ComparableKeysByGoodId goodIdKeys = new ComparableKeysByGoodId(row.get("goodid").valueAsString(),diskLoc);
        DiskLocQueues.comparableKeysByGoodIdQueue.put(goodIdKeys);
    }
}

class BuyerFileHandler extends DataFileHandler{
    @Override
    void handleLine(String line) throws IOException, OrderSystem.TypeException, InterruptedException {
        byte[] bytes = line.getBytes("UTF-8");
        DiskLoc diskLoc = storeExtentManager.putBytes(bytes);
        diskLoc.setStoreType(StoreType.BUYERLINE);

        int i = line.indexOf("buyerid:");
        line = line.substring(i+8);
        i = line.indexOf("\t");
        String buyerid = line.substring(0,i);
        /**
         * Put index info to queue
         */
        ComparableKeysByBuyerId key = new ComparableKeysByBuyerId(buyerid,diskLoc);
        DiskLocQueues.comparableKeysByBuyerIdQueue.put(key);
    }

    void handleRow(Row row) throws IOException,InterruptedException {
        byte[] byteRow = SerializationUtils.serialize(row);
        DiskLoc diskLoc = storeExtentManager.putBytes(byteRow);
        diskLoc.setStoreType(StoreType.ROWDATA);
        /**
         * Put index info to queue
         */
        ComparableKeysByBuyerId buyerIdKeys = new ComparableKeysByBuyerId(row.get("buyerid").valueAsString(),diskLoc);
        DiskLocQueues.comparableKeysByBuyerIdQueue.put(buyerIdKeys);
    }
}

class OrderFileHandler extends DataFileHandler{
    @Override
    void handleLine(String line) throws IOException, OrderSystem.TypeException, InterruptedException {
        byte[] bytes = line.getBytes("UTF-8");
        DiskLoc diskLoc = storeExtentManager.putBytes(bytes);
        diskLoc.setStoreType(StoreType.ORDERLINE);
        int i = line.indexOf("orderid:");
        String tmp = line.substring(i+8);
        i = tmp.indexOf("\t");
        String orderidStr = tmp.substring(0,i);
        Long orderid= Long.parseLong(orderidStr);

        i = line.indexOf("goodid:");
        tmp = line.substring(i+7);
        i = tmp.indexOf("\t");
        String goodid = tmp.substring(0,i);

        i = line.indexOf("buyerid:");
        tmp = line.substring(i+8);
        i = tmp.indexOf("\t");
        String buyerid = tmp.substring(0,i);

        i = line.indexOf("createtime:");
        tmp = line.substring(i+11);
        i = tmp.indexOf("\t");
        String createtimeStr = tmp.substring(0,i);
        Long createtime = Long.parseLong(createtimeStr);

        ComparableKeysByOrderId orderIdKeys = new ComparableKeysByOrderId(orderid,diskLoc);
        DiskLocQueues.comparableKeysByOrderId.put(orderIdKeys);

        ComparableKeysByBuyerCreateTimeOrderId buyerCreateTimeOrderId = new ComparableKeysByBuyerCreateTimeOrderId(
                buyerid, createtime, orderid,diskLoc
        );
        DiskLocQueues.comparableKeysByBuyerCreateTimeOrderId.put(buyerCreateTimeOrderId);

        ComparableKeysByGoodOrderId goodOrderKeys = new ComparableKeysByGoodOrderId(
                goodid,orderid,diskLoc
        );
        DiskLocQueues.comparableKeysByGoodOrderId.put(goodOrderKeys);
    }

    void handleRow(Row row) throws IOException,OrderSystem.TypeException,InterruptedException{
        byte[] byteRow = SerializationUtils.serialize(row);
        DiskLoc diskLoc = storeExtentManager.putBytes(byteRow);
        diskLoc.setStoreType(StoreType.ROWDATA);

        /**
         * Put index info to queue
         */
        ComparableKeysByOrderId orderIdKeys = new ComparableKeysByOrderId(row.get("orderid").valueAsString(),diskLoc);
        DiskLocQueues.comparableKeysByOrderId.put(orderIdKeys);

        ComparableKeysByBuyerCreateTimeOrderId buyerCreateTimeOrderId = new ComparableKeysByBuyerCreateTimeOrderId(
                row.get("buyerid").valueAsString(), row.get("createtime").valueAsLong(), row.get("orderid").valueAsLong(),diskLoc
        );
        DiskLocQueues.comparableKeysByBuyerCreateTimeOrderId.put(buyerCreateTimeOrderId);

        ComparableKeysByGoodOrderId goodOrderKeys = new ComparableKeysByGoodOrderId(
                row.get("goodid").valueAsString(),row.get("orderid").valueAsLong(),diskLoc
        );
        DiskLocQueues.comparableKeysByGoodOrderId.put(goodOrderKeys);
    }
}